AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda - SQS - SNS - S3

Resources:
  # Define the SQS queue
  MySqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      VisibilityTimeout: 120


  # Define the SNS topic
  MySnsTopic:
    Type: AWS::SNS::Topic

  MySubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt MySqsQueue.Arn
      Protocol: sqs
      TopicArn: !Ref 'MySnsTopic'
      # Applying the Filter policy on SNS
      FilterPolicy:
        buyer-class:
          - vip

  # Policy allows SNS to publish to this SQS queue
  SnsToSqsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "Allow SNS publish to SQS"
            Effect: Allow
            Principal: 
              Service: "sns.amazonaws.com"
            Resource: !GetAtt MySqsQueue.Arn
            Action: SQS:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref MySnsTopic
      Queues:
        - Ref: MySqsQueue

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: allowLambdaLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:*
              Resource: arn:aws:logs:*:*:*
        - PolicyName: allowSqs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:ChangeMessageVisibility
              Resource: !GetAtt MySqsQueue.Arn

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          var AWS = require('aws-sdk');
          function putObjectToS3(bucket, key, data){
          var s3 = new AWS.S3();
          var params = {
            Bucket : bucket,
            Key : key,
            Body : data
            }
          s3.putObject(params, function(err, data) {
          if (err) console.log(err, err.stack);
            else     console.log(data);
          });
          }
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs14.x
      Timeout: 60
      MemorySize: 512

  LambdaFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt MySqsQueue.Arn
      FunctionName: !GetAtt LambdaFunction.Arn

  DemoBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: sqs-events-demo-123
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: Rule for log prefix
            Prefix: logs
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER
            ExpirationInDays: 365

Outputs:
  MySqsQueueName:
    Description: SQS queue name
    Value: !GetAtt MySqsQueue.QueueName
  MySqsQueueArn:
    Description: SQS queue ARN
    Value: !GetAtt MySqsQueue.Arn
